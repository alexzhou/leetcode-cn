**方法一：数组或哈希表计数**

用数组或者哈希表统计 `nums` 中每个数字出现的次数，由于题目中数字的范围是 `[-100, 100]`，我们可以直接创建一个大小为 $201$ 的数组来统计。

然后对 `nums` 按照数字出现次数升序排序，如果出现次数相同，则按照数字降序排序。

* [sol1-Python3]

```python
class Solution:
    def frequencySort(self, nums: List[int]) -> List[int]:
        cnt = Counter(nums)
        return sorted(nums, key=lambda x: (cnt[x], -x))
```

* [sol1-Java]

```java
class Solution {
    public int[] frequencySort(int[] nums) {
        int[] cnt = new int[201];
        List<Integer> t = new ArrayList<>();
        for (int v : nums) {
            v += 100;
            ++cnt[v];
            t.add(v);
        }
        t.sort((a, b) -> cnt[a] == cnt[b] ? b - a : cnt[a] - cnt[b]);
        int i = 0;
        for (int v : t) {
            nums[i++] = v - 100;
        }
        return nums;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    vector<int> frequencySort(vector<int>& nums) {
        vector<int> cnt(201);
        for (int v : nums) {
            ++cnt[v + 100];
        }
        sort(nums.begin(), nums.end(), [&](const int a, const int b) {
            if (cnt[a + 100] == cnt[b + 100]) return a > b;
            return cnt[a + 100] < cnt[b + 100];
        });
        return nums;
    }
};
```

* [sol1-Go]

```go
func frequencySort(nums []int) []int {
	cnt := make([]int, 201)
	for _, v := range nums {
		cnt[v+100]++
	}
	sort.Slice(nums, func(i, j int) bool {
		a, b := nums[i]+100, nums[j]+100
		return cnt[a] < cnt[b] || cnt[a] == cnt[b] && a > b
	})
	return nums
}
```

**复杂度分析：**

时间复杂度为 $O(n\log n)$，空间复杂度 $O(n)$。其中 $n$ 为 `nums` 的长度。
